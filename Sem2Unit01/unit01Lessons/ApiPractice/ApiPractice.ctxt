#BlueJ class context
comment0.target=ApiPractice
comment1.params=a\ b
comment1.target=double\ hypotenuse(double,\ double)
comment1.text=\n\ Finds\ the\ hypotenuse\ of\ a\ right\ triangle\ given\ sides\ a\ and\ b.\n\ @param\ a\ Length\ of\ side\ a.\n\ @param\ b\ Length\ of\ side\ b.\n\ @return\ Length\ of\ hypotenuse.\n
comment10.params=s
comment10.target=java.lang.String\ getStringAfterComma(java.lang.String)
comment10.text=\n\ Returns\ a\ substring\ of\ the\ incoming\ string\ that\ contains\ all\ of\ the\ \n\ characters\ after\ the\ comma\ found\ inside\ the\ string.\n\ @param\ s\ A\ string\ with\ a\ comma\ somewhere\ inside\ of\ it.\n\ @return\ The\ substring\ after\ the\ comma.\n
comment2.params=a\ b
comment2.target=double\ max(double,\ double)
comment2.text=\n\ Returns\ the\ greater\ of\ two\ values.\ If\ the\ values\ are\ exactly\ the\ same,\n\ it\ returns\ one\ of\ them.\n\ @param\ a\ First\ value.\n\ @param\ b\ Second\ value.\n\ @return\ Largest\ value.\n
comment3.params=a\ b
comment3.target=double\ min(double,\ double)
comment3.text=\n\ Returns\ the\ smaller\ of\ two\ values.\ If\ the\ values\ are\ exactly\ the\ same,\n\ it\ returns\ one\ of\ them.\n\ @param\ a\ First\ value.\n\ @param\ b\ Second\ value.\n\ @return\ Smallest\ value.\n
comment4.params=a\ b
comment4.target=java.lang.String\ max(java.lang.String,\ java.lang.String)
comment4.text=\n\ Returns\ the\ lexicographically\ greater\ of\ two\ strings.\ If\ the\ values\ are\n\ exactly\ the\ same,\ it\ returns\ one\ of\ them.\n\ @param\ a\ First\ string.\n\ @param\ b\ Second\ string.\n\ @return\ Lexicographically\ greatest\ string.\n
comment5.params=a\ b
comment5.target=java.lang.String\ min(java.lang.String,\ java.lang.String)
comment5.text=\n\ Returns\ the\ lexicographically\ lesser\ of\ two\ strings.\ If\ the\ values\ are\n\ exactly\ the\ same,\ it\ returns\ one\ of\ them.\n\ @param\ a\ First\ string.\n\ @param\ b\ Second\ string.\n\ @return\ Lexicographically\ lesser\ string.\n
comment6.params=a\ b
comment6.target=boolean\ isSameText(java.lang.String,\ java.lang.String)
comment6.text=\n\ Compares\ two\ strings\ to\ see\ if\ they\ contain\ the\ same\ text.\n\ @param\ a\ First\ string.\n\ @param\ b\ Second\ string.\n\ @return\ <code>true</code>\ if\ the\ strings\ contain\ the\ same\ text,\n\ <code>false</code>\ otherwise.\n
comment7.params=a\ b\ c
comment7.target=java.lang.String\ getLongestString(java.lang.String,\ java.lang.String,\ java.lang.String)
comment7.text=\n\ Returns\ the\ longest\ string\ (the\ string\ with\ the\ greatest\ number\ of\n\ characters)\ out\ of\ three\ strings.\ If\ two\ or\ more\ strings\ have\ the\ same\n\ number\ of\ characters,\ it\ returns\ the\ first\ one.\n\ @param\ a\ First\ string.\n\ @param\ b\ Second\ string.\n\ @param\ c\ Third\ string.\n\ @return\ String\ with\ the\ fewest\ characters.\n
comment8.params=list
comment8.target=java.lang.String\ getShortestString(java.util.List)
comment8.text=\n\ Returns\ the\ shortest\ string\ (the\ string\ with\ the\ lowest\ number\ of\ \n\ characters)\ from\ a\ list\ of\ strings.\ If\ two\ or\ more\ strings\ have\ the\n\ same\ number\ of\ characters,\ it\ returns\ the\ first\ one.\n\ \n\ If\ the\ incoming\ list\ is\ <code>null</code>\ or\ contains\ zero\ strings,\ \n\ this\ method\ returns\ <code>null</code>.\n\ \n\ @param\ list\ List\ of\ incoming\ strings.\n\ @return\ String\ with\ the\ fewest\ characters.\n
comment9.params=s
comment9.target=java.lang.String\ getStringBeforeComma(java.lang.String)
comment9.text=\n\ Returns\ a\ substring\ of\ the\ incoming\ string\ that\ contains\ all\ of\ the\ \n\ characters\ leading\ up\ to,\ but\ not\ including,\ the\ comma\ found\n\ in\ the\ string.\n\ @param\ s\ A\ string\ with\ a\ comma\ somewhere\ inside\ of\ it.\n\ @return\ The\ substring\ leading\ up\ to\ the\ comma.\n
numComments=11
